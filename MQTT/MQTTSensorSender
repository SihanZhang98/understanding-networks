#include <WiFiNINA.h>  // for MKR1010 modules and Nano 33 IoT modules
#include <ArduinoMqttClient.h>

// network names and passwords:
#include "arduino_secrets.h"

// initialize WiFi connection using SSL
// (use WIFiClient and port number 1883 for unencrypted connections):
WiFiClient wifi;
MqttClient mqttClient(wifi);
String addressString = "";

// details for MQTT client:
char broker[] = "test.mosquitto.org";
int port = 1883;
char topic[] = "undnet/sihan";
String clientID = "sihan";

// timestamp for the sensor reading and send:
long lastSendTime = 0;

// interval between requests:
int sendInterval = 60 * 1000;

int analog_IN = A0;

void setup() {
  Serial.begin(9600);  // initialize serial communication
  // if serial monitor is not open, wait 3 seconds:
  if (!Serial) delay(3000);

  // set the credentials for the MQTT client:
   mqttClient.setId(clientID);
  // // login to the broker with a username and password:
  // mqttClient.setUsernamePassword(SECRET_MQTT_USER, SECRET_MQTT_PASS);

// connect to WiFi
  connectToNetwork();

  // try to connect to the MQTT broker once you're connected to WiFi:
  while (!connectToBroker()) {
    Serial.println("attempting to connect to broker");
    delay(1000);
  }
  Serial.println("connected to broker");
}

void loop() {
  //if you disconnected from the network, reconnect:
  if (WiFi.status() != WL_CONNECTED) {
    connectToNetwork();
  }

  // if not connected to the broker, try to connect:
  if (!mqttClient.connected()) {
    Serial.println("reconnecting to broker");
    connectToBroker();
  } else {
    // If the client is not connected:  if (!client.connected()) {
    // and the request interval has passed:
    if (millis() - lastSendTime >= sendInterval) {
      // read the sensor     
      int sensorValue = analogRead(analog_IN);  
      String body = "{\"Air Quality\": ll}";
      body.replace("ll", String(sensorValue));
      //body.replace("cc", String(colorTemp));

      // start the mesage:
      mqttClient.beginMessage(topic);
      // add the value:
      mqttClient.println(body);
      // send the message:
      mqttClient.endMessage();

      // take note of the time you make your request:
      lastSendTime = millis();
    }
  }
}


void connectToNetwork() {
  // try to connect to the network:
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("Attempting to connect to: " + String(SECRET_SSID));
    //Connect to WPA / WPA2 network:
    WiFi.begin(SECRET_SSID, SECRET_PASS);
    delay(2000);
  }
  Serial.println("connected.");
}

boolean connectToBroker() {
  // if the MQTT client is not connected:
  if (!mqttClient.connect(broker, port)) {
    // print out the error message:
    Serial.print("MQTT connection failed. Error no: ");
    Serial.println(mqttClient.connectError());
    // return that you're not connected:
    return false;
  }
  mqttClient.subscribe(topic);
  // once you're connected, you
  // return that you're connected:
  return true;
}
